# Unique tag for feature transforms configuration. 
# Multiple configurations will exist (ensemble) in parallel
title: narrow


# Create "transformers": functions which *transform* features. 
# See SchemasTransforms.py for supported functionality and arguments.
# Farther down -- per feature, declare which transformers apply. 
transformers:

  standard_scale:
    with_mean: true
    with_std: true

  impute_numeric:
    strategy: median
    add_indicator: true

  impute_numeric_zero:
    strategy: constant
    fill_value: 0
    add_indicator: false

  impute_numeric_flag:
    strategy: most_frequent
    add_indicator: true

  impute_string:
    strategy: constant
    fill_value: NULL
    add_indicator: false

  consolidate_rare_levels:
    thresh_nobs: 5
    overwrite_with: OTHER

  target_encode_normal:
    n_cv_splits: 3
    target_prior_distribution:
      mu: .005
      # how to specify prior variance_mean?
      # start with observable quantities: Var(Y), and related Var(Ybar).
      # when Var(Ybar) = Var(Y) / N = var_prior_mu, then 
      # prior mean receives 50% weight into posterior mean:
        # weight_{prior_mean} = var_sample_mu / (var_sample_mu + var_prior_mu).
      # choose N_critical such that, Ybar & prior_mu should weight 50/50.
      # then, Var(Y) / N_critical = var_prior_mu.
      variance_mu: 1e-4

  onehot_encode:
    # categories either 'auto' or 'featurewise', in this transformers block.
    # if applicable, don't list features' levels here; use features block
    categories: 'auto'


# Feature-wise - specify transforms, as well as data type
features:

  # <feature_name>:
    # dtype: <dtype>
    # transforms:
      # <transformer1>:
        # end above line with colon in case of feature-wise args. 
        # Prefer standard formatting over all transforms, versus variable colon-end. 
        # If no feature-wise transformer arguments, stop here.
        # feature-wise transformer arguments may arise for: 
        # one-hot encoding, min-max censoring, ...
        # <arg1>: <value1>
        # <arg2>: <value2>
        # ...
      # <transformer2>:
        # <arg1>: <value1>
        # <arg2>: <value2>
        # ...

  years_old_at_draft:
    dtype: float
    transforms:
      impute_numeric:

  overall_pick_at_draft:
    dtype: float
    transforms:
      impute_numeric:

  sending_source_at_draft:
    dtype: string
    transforms:
      impute_string:
      consolidate_rare_levels:
      target_encode_normal:

  team_short_at_draft:
    dtype: string
    transforms:
      impute_string:
      consolidate_rare_levels:
      target_encode_normal:

  n_prospect_rankings_total:
    dtype: float
    transforms:
      impute_numeric:

  prospect_ranking_last:
    dtype: float
    transforms:
      impute_numeric:

  prospect_ranking_delta:
    dtype: float
    transforms:
      impute_numeric:

  age_season1:
    dtype: float
    transforms:
      impute_numeric:

  g_fraction_full_season_season1:
    dtype: float
    transforms:
      impute_numeric:

  team1_season1:
    dtype: string
    transforms:
      impute_string:
      consolidate_rare_levels:
      target_encode_normal:

  war_per_g_season1:
    dtype: float
    transforms:
      impute_numeric:

  team_latest_rank_season1:
    dtype: float
    transforms:
      impute_numeric:

  team_latest_wins_rate_season1:
    dtype: float
    transforms:
      impute_numeric:
  
  team_latest_wins_rate_movv3_excl_season1:
    dtype: float
    transforms:
      impute_numeric:
